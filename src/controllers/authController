//controllers/authController
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const asyncHandler = require('express-async-handler');
const { createDatabaseConnection } = require('../config/database');
const { passwordConfig: SQLAuthentication } = require('../config/config.js');

// Assuming database connection is established
let database;
createDatabaseConnection(SQLAuthentication).then((db) => {
  database = db;
});

// Helper function to generate token
const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: '3d' });
};

// Register new user
const registerUser = asyncHandler(async (req, res) => {
  const { FullName, Username, Password, Email, Phone, Address, Status, IsExternal, ExternalProvider } = req.body;

  // Check if username already exists
  const existingUser = await database.readUserByUsername(Username);
  if (existingUser) {
    return res.status(400).json({ message: "Username already taken" });
  }

  // Hash the password
  const hashedPassword = await bcrypt.hash(Password, 10);

  // Create new user in the database
  try {
    await database.createUser({
      FullName,
      Username,
      Password: hashedPassword,
      Email,
      Phone,
      Address,
      Status,
      IsExternal,
      ExternalProvider,
    });

    res.status(201).json({ message: "User registered successfully" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Login user
const loginUser = asyncHandler(async (req, res) => {
  const { Username, Password } = req.body;

  // Check if the user exists
  const user = await database.readUserByUsername(Username);
  if (!user) {
    return res.status(400).json({ message: "Invalid username or password" });
  }

  // Check if password matches
  const isPasswordMatch = await bcrypt.compare(Password, user.Password);
  if (!isPasswordMatch) {
    return res.status(400).json({ message: "Invalid username or password" });
  }

  // Generate JWT token
  const token = generateToken(user.UserID);

  res.status(200).json({ message: "Login successful", token });
});

// Logout user (no backend state change needed)
const logoutUser = asyncHandler(async (req, res) => {
  // Frontend will handle the removal of the token from storage (localStorage, cookies, etc.)
  res.status(200).json({ message: "Logged out successfully" });
});

module.exports = {
  registerUser,
  loginUser,
  logoutUser,
};
